# Выполнение домашних работ по занятию 2.

def start_homework(name):

    print(name)

    while not ((lv_task_n := int(input("Enter task: "))) in range(1, 7)):
        pass
    # Задание №1
    # Создать список и заполнить его элементами различных типов данных.
    # Реализовать скрипт проверки типа данных каждого элемента.
    # Использовать функцию type() для проверки типа.
    # Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
    if lv_task_n == 1:

        lv_list = [
            1, 4, 5, 'sdf', 'ff', [4, 1], (1, 3), 9, b'0'
        ]

        # вот и операция распаковки, так как энумирейт возвращает кортежи.
        for ind, el in enumerate(lv_list):
            print(
                f"Position: {ind},  {el}  . type {type(el)}. Sizeof: {el.__sizeof__()} Memory adress: {id(el)}")

    # Задание №2
    # Для списка реализовать обмен значений соседних элементов.
    # Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д.
    # При нечётном количестве элементов последний сохранить на своём месте.
    # Для заполнения списка элементов нужно использовать функцию input().
    if lv_task_n == 2:

        ls_list = []
        # Ввод значений
        while (lv_list_val := input("Enter list value (for stop, enter \'done\'): ")) != "done":
            ls_list.append(lv_list_val)

        # Сортировка
        lv_i = 1
        for el in ls_list[1::2]:

            # вот это поворот... долго я думал однако. А ведь это в методичке написано.
            ls_list[lv_i-1], ls_list[lv_i] = ls_list[lv_i], ls_list[lv_i-1]
            lv_i += 2

        print(ls_list)

    # Задание №3
    # Пользователь вводит месяц в виде целого числа от 1 до 12.
    # Сообщить, к какому времени года относится месяц (зима, весна, лето, осень).
    # Напишите решения через list и dict.
    if lv_task_n == 3:
        lv_dic_mon = {
            1: ("Winter", "January"),
            2: ("Winter", "Febuary"),
            3: ("Spring", "March"),
            4: ("Spring", "April"),
            5: ("Spring", "May"),
            6: ("Summer", "June"),
            7: ("Summer", "July",),
            8: ("Summer", "August"),
            9: ("Autumn", "September"),
            10: ("Autumn", "October"),
            11: ("Autumn", "November"),
            12: ("Winter", "December")
        }

        lv_season, lv_month = lv_dic_mon.get(
            int(input("Select 1 to 12 digit:")))

        print(lv_season)

    # Задание №4
    # Пользователь вводит строку из нескольких слов, разделённых пробелами.
    # Вывести каждое слово с новой строки. Строки нужно пронумеровать.
    # Если слово длинное, выводить только первые 10 букв в слове.
    if lv_task_n == 4:
        lv_string = input("Tap your string:\n")

        for el in lv_string.split():
            if len(el) > 10:
                print(el[0:10])
                continue
            print(el)

    # Задание №5
    # Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает.
    # У пользователя нужно запрашивать новый элемент рейтинга.
    # Если в рейтинге существуют элементы с одинаковыми значениями,
    # то новый элемент с тем же значением должен разместиться после них.
    # Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
    # Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
    # Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
    # Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
    # Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].
    if lv_task_n == 5:
        ls_list2 = [5, 6, 3, 5, 8, 1]
        ls_list2.sort(reverse=True)
        print(ls_list2)
        while not (lv_val := input("Enter your value to insert into list (type \'done\' to stop):")) == 'done':
            lv_val = int(lv_val)
            #Рассматриваем случаи:
            #1) есть ли вообще такой элемент
            #2) куда добавить элемент - в начало списка как самый большой или в конец списка как самый маленький.
            if(ls_list2.count(lv_val) > 0):
                print(ls_list2.count(lv_val))
                ls_list2.insert(ls_list2.index(lv_val), (lv_val))
                continue
            if(ls_list2[0] < lv_val):
                ls_list2.insert(0, lv_val)
            else:
                ls_list2.append(lv_val)

        print(ls_list2)

    # Задание №6 *
    # Реализовать структуру данных «Товары».
    # Она должна представлять собой список кортежей. Каждый кортеж хранит информацию об отдельном товаре.
    # В кортеже должно быть два элемента — номер товара и словарь с параметрами, то есть характеристиками товара:
    # название, цена, количество, единица измерения. Структуру нужно сформировать программно, запросив все данные у пользователя.
    # Пример готовой структуры:
    #     [
    #         (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}), 
    #         (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
    #         (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
    #     ]

    #     Нужно собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ —
    #     характеристика товара, например, название. Тогда значение — значений-характеристик, например, список названий товаров.
    #     Пример:
    #     {
    #         “название”: [“компьютер”, “принтер”, “сканер”], 
    #         “цена”: [20000, 6000, 2000],
    #         “количество”: [5, 2, 7],
    #         “ед”: [“шт.”]
    #     }

    if lv_task_n == 6:
        ls_goods = []
        ld_analysis = {"Название":[], "Цена":[], "Количество":[], "ед.":[]}


        #Ввод данных о товарах:
        lv_i = 0
        while True:
            lv_goods_name = input("Enter goods name: ")
            lv_goods_price = input("Enter goods price: ")
            lv_goods_quan = input("Enter goods quantity: ")
            lv_goods_uom = input("Enter goods unit of measure: ")
        
            ls_goods.append(
                (lv_i:=lv_i+1, 
                    {"Название":lv_goods_name, "Цена":lv_goods_price, "Количество":lv_goods_quan, "ед.":lv_goods_uom}
                )
            )
            

            if(input("Continue? (y/n):") == "n"): 
                break

        
        print(ls_goods)

        for num_goods, goods_chars in ls_goods:
            print(num_goods,goods_chars)
            for el in goods_chars:
                ld_analysis[el].append(goods_chars[el])
                ld_analysis[el]=list(set(ld_analysis[el]))
            print(ld_analysis)

if __name__ == '__main__':
    start_homework('\n Lesson_2')
